// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_bloc_blog/test/feature/auth/domain/repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_bloc_blog/core/failure.dart' as _i5;
import 'package:flutter_bloc_blog/features/auth/data/datasources/auth_remote_datasources.dart'
    as _i3;
import 'package:flutter_bloc_blog/features/auth/data/datasources/local_remote_datasources.dart'
    as _i7;
import 'package:flutter_bloc_blog/features/auth/domain/entities/auth_entity.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i3.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, dynamic>> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, dynamic>>.value(
            _FakeEither_0<_i5.Failure, dynamic>(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, dynamic>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, dynamic>> signUpWithEmailAndPassword({
    required String? email,
    required String? password,
    required String? username,
    required String? firstName,
    required String? lastName,
    required String? phoneNumber,
    required String? address,
    required String? city,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
            #username: username,
            #firstName: firstName,
            #lastName: lastName,
            #phoneNumber: phoneNumber,
            #address: address,
            #city: city,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, dynamic>>.value(
            _FakeEither_0<_i5.Failure, dynamic>(
          this,
          Invocation.method(
            #signUpWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
              #username: username,
              #firstName: firstName,
              #lastName: lastName,
              #phoneNumber: phoneNumber,
              #address: address,
              #city: city,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, dynamic>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>> signInWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.AuthEntity>(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>> signInWithFacebook() =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithFacebook,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.AuthEntity>(
          this,
          Invocation.method(
            #signInWithFacebook,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>> signInWithApple() =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithApple,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.AuthEntity>(
          this,
          Invocation.method(
            #signInWithApple,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>> signInAnonymously() =>
      (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.AuthEntity>(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>> signOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.AuthEntity>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i7.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheAuthData(_i6.AuthEntity? authEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheAuthData,
          [authEntity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.AuthEntity?> getAuthData() => (super.noSuchMethod(
        Invocation.method(
          #getAuthData,
          [],
        ),
        returnValue: _i4.Future<_i6.AuthEntity?>.value(),
      ) as _i4.Future<_i6.AuthEntity?>);
}
